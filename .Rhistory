df4.1 <- data.frame(0:100, b1, n1)
ggplot(df4.1, aes(n1, b1)) + geom_step(0:100,b1, color = "blue")
library(ggplot2)
b1 <- data.frame(x = 0:100, y = pbinom(100, 100, 0.3))
n1 <- data.frame(x = 0:100, y = pnorm(100, 100*0.3, sqrt(100*0.3*(1-0.3))))
ggplot() + geom_step(data = b1, aes(x, y), color="blue") + geom_line(data = n1, aes(x, y), color="red")
library(ggplot2)
b1 <- data.frame(x = 0:100, y = pbinom(100, 100, 0.3))
n1 <- data.frame(x = 0:100, y = pnorm(100, 100*0.3, sqrt(100*0.3*(1-0.3))))
ggplot() + geom_step(data = b1, aes(x, y), color="blue")
b1
library(ggplot2)
b1 <- data.frame(x = 0:100, y = pbinom(0:100, 100, 0.3))
n1 <- data.frame(x = 0:100, y = pnorm(0:100, 100*0.3, sqrt(100*0.3*(1-0.3))))
ggplot() + geom_step(data = b1, aes(x, y), color="blue") + geom_line(data = n1, aes(x, y), color="red")
library(ggplot2)
b1 <- data.frame(x = 0:100, y = pbinom(0:100, 100, 0.3))
n1 <- data.frame(x = 0:100, y = pnorm(0:100, 100*0.3, sqrt(100*0.3*(1-0.3))))
ggplot() +
geom_step(data = b1, aes(x, y), color="blue") +
geom_line(data = n1, aes(x, y), color="red")
library(ggplot2)
b1 <- data.frame(x = 0:100, y = pbinom(0:100, 100, 0.3))
n1 <- data.frame(x = 0:100, y = pnorm(0:100, 100*0.3, sqrt(100*0.3*(1-0.3))))
ggplot() +
geom_step(data = b1, aes(x, y), color="blue") +
geom_line(data = n1, aes(x, y), color="red")
b2 <- data.frame(x = 0:100, y = pbinom(0:100, 100, 0.95))
n2 <- data.frame(x = 0:100, y = pnorm(0:100, 100*0.95, sqrt(100*0.95*(1-0.95))))
ggplot() +
geom_step(data = b2, aes(x, y), color="blue") +
geom_line(data = n2, aes(x, y), color="red")
b2 <- data.frame(x = 0:80, y = pbinom(0:80, 80, 0.95))
n2 <- data.frame(x = 0:80, y = pnorm(0:80, 80*0.95, sqrt(80*0.95*(1-0.95))))
ggplot() +
geom_step(data = b2, aes(x, y), color="blue") +
geom_line(data = n2, aes(x, y), color="red")
b3 <- data.frame(x = 0:15, y = pbinom(0:15, 15, 0.5))
n3 <- data.frame(x = 0:15, y = pnorm(0:15, 15*0.5, sqrt(15*0.5*0.5)))
ggplot() +
geom_step(data = b3, aes(x, y), color="blue") +
geom_line(data = n3, aes(x, y), color="red")
qqnorm(rnorm(10, 0, 1))
par(mfrow=c(5,1))
qqnorm(rnorm(10, 0, 1))
attach(mtcars)
par(mfrow=c(5,1))
qqnorm(rnorm(10, 0, 1))
attach(mtcars)
par(mfrow=c(5,1), fig=c(0,0.8,0,0.8))
qqnorm(rnorm(10, 0, 1))
qqnorm(rnorm(20, 0, 1))
qqnorm(rnorm(40, 0, 1))
qqnorm(rnorm(100, 0, 1))
qqnorm(rnorm(400, 0, 1))
par(mfrow=c(2,3))
qqnorm(rnorm(10, 0, 1))
qqnorm(rnorm(20, 0, 1))
qqnorm(rnorm(40, 0, 1))
qqnorm(rnorm(100, 0, 1))
qqnorm(rnorm(400, 0, 1))
par(mfrow=c(3,2))
qqnorm(rnorm(10, 0, 1))
qqnorm(rnorm(20, 0, 1))
qqnorm(rnorm(40, 0, 1))
qqnorm(rnorm(100, 0, 1))
qqnorm(rnorm(400, 0, 1))
par(mfrow=c(2,3))
qqnorm(rnorm(10, 0, 1))
qqnorm(rnorm(20, 0, 1))
qqnorm(rnorm(40, 0, 1))
qqnorm(rnorm(100, 0, 1))
qqnorm(rnorm(400, 0, 1))
#par(mfrow=c(2,3))
qqnorm(rnorm(10, 0, 1))
qqnorm(rnorm(20, 0, 1))
qqnorm(rnorm(40, 0, 1))
qqnorm(rnorm(100, 0, 1))
qqnorm(rnorm(400, 0, 1))
hist(pnorm(rnorm(10000,0,1)))
par(mfrow=c(2,1))
hist(pnorm(rnorm(10000,0,1)))
plot.ecdf(pnorm(rnorm(10000,0,1)))
par(mfrow=c(1,2))
hist(pnorm(rnorm(10000,0,1)))
plot.ecdf(pnorm(rnorm(10000,0,1)))
hist(pnorm(rnorm(10000,0,1)))
plot.ecdf(pnorm(rnorm(10000,0,1)))
hist(pexp(rexp(10000, 0.5)))
plot.ecdf(pexp(rexp(10000,0.5)))
hist(pexp(rexp(10000, 0.5), 0.5))
plot.ecdf(pexp(rexp(10000,0.5), 0.5))
hist(pgamma(rgamma(10000, shape = 2.5, scale = 5), shape = 2.5, scale = 5))
plot.ecdf(pgamma(rgamma(10000, shape = 2.5, scale = 5), shape = 2.5, scale = 5))
rexp(10000, 0.5) + rexp(10000, 0.5)
x.bonus <- rexp(10000, 0.5) + rexp(10000, 0.5)
x.bonus^2
for(i in seq(0, 0.05, by = 0.01)){
qqnorm(x.bonus^i)
}
for(i in seq(0, 0.05, by = 0.005)){
qqnorm(x.bonus^i)
}
for(i in seq(0, 0.05, by = 0.002)){
qqnorm(x.bonus^i)
}
for(i in seq(0, 0.05, by = 0.05)){
qqnorm(x.bonus^i)
}
for(i in seq(0, 0.05, by = 0.005)){
qqnorm(x.bonus^i)
}
for(i in seq(0.001, 0.05, by = 0.005)){
qqnorm(x.bonus^i)
qqline(x.bonus^i)
}
#par(mfrow=c(2,3))
qqnorm(rnorm(10, 0, 1))
qqnorm(rnorm(20, 0, 1))
qqnorm(rnorm(40, 0, 1))
qqnorm(rnorm(100, 0, 1))
qqnorm(rnorm(400, 0, 1))
qqline(rnorm(400, 0, 1))
for(i in seq(0.001, 0.05, by = 0.001)){
qqnorm(x.bonus^i)
qqline(x.bonus^i)
}
x.bonus <- rexp(10000, 0.2) + rexp(10000, 0.2)
for(i in seq(0.001, 0.05, by = 0.005)){
qqnorm(x.bonus^i)
qqline(x.bonus^i)
}
for(i in seq(0.001, 0.09, by = 0.005)){
qqnorm(x.bonus^i)
qqline(x.bonus^i)
}
for(i in seq(0, 0.05, by = 0.01)){
qqnorm(x.bonus^i)
qqline(x.bonus^i)
}
for(i in seq(-0.05, 0.05, by = 0.01)){
qqnorm(x.bonus^i)
qqline(x.bonus^i)
}
x.bonus <- rexp(10000, 0.2) + rexp(10000, 0.2)
p <- 0.01
alpha <- 0.05
while(p <= 0.05){
p <- shapiro.test(x.bonus ^ alpha)
alpha <- alpha + 0.05
}
x.bonus <- rexp(1000, 0.2) + rexp(1000, 0.2)
p <- 0.01
alpha <- 0.05
while(p <= 0.05){
p <- shapiro.test(x.bonus ^ alpha)
alpha <- alpha + 0.05
}
qqnorm(x.bonus ^ alpha)
qqline(color="red")
x.bonus <- rexp(1000, 0.2) + rexp(1000, 0.2)
p <- 0.01
alpha <- 0.05
while(p <= 0.05){
p <- shapiro.test(x.bonus ^ alpha)
alpha <- alpha + 0.05
}
qqnorm(x.bonus ^ alpha)
qqline(x.bonus ^ alpha, color = "red")
x.bonus <- rexp(1000, 0.2) + rexp(1000, 0.2)
p <- 0.01
alpha <- 0.05
while(p <= 0.05){
p <- shapiro.test(x.bonus ^ alpha)
alpha <- alpha + 0.05
}
qqnorm(x.bonus ^ alpha)
qqline(x.bonus ^ alpha)
x.bonus <- rexp(1000, 0.2) + rexp(1000, 0.2)
p <- 0.01
alpha <- 0.05
while(p <= 0.05){
p <- shapiro.test(x.bonus ^ alpha)
alpha <- alpha + 0.05
}
alpha
x.bonus <- rexp(1000, 0.2) + rexp(1000, 0.2)
p <- 0.01
alpha <- 0.01
while(p <= 0.05){
p <- shapiro.test(x.bonus ^ alpha)
alpha <- alpha + 0.01
}
alpha
x.bonus <- rexp(1000, 0.2) + rexp(1000, 0.2)
p <- 0.01
alpha <- 0.01
while(p <= 0.05){
p <- shapiro.test(x.bonus ^ alpha)[2]
alpha <- alpha + 0.01
}
alpha
shapiro.test(x.bonus ^ alpha)[2]
shapiro.test(x.bonus ^ 0.25)[2]
shapiro.test(x.bonus ^ 0.24)[2]
shapiro.test(x.bonus ^ 0.25)[2]
shapiro.test(x.bonus ^ 0.25)[2]
x.bonus <- rexp(1000, 0.2) + rexp(1000, 0.2)
p <- 0.01
alpha <- 0
while(p <= 0.05){
alpha <- alpha + 0.01
p <- shapiro.test(x.bonus ^ alpha)[2]
}
alpha
x.bonus <- rexp(1000, 0.2) + rexp(1000, 0.2)
p <- 0.01
alpha <- 0
while(p <= 0.05){
alpha <- alpha + 0.01
p <- shapiro.test(x.bonus ^ alpha)[2]
}
alpha
shapiro.test(x.bonus ^ 0.23)[2]
shapiro.test(x.bonus ^ 0.22)[2]
qqnorm(x.bonus ^ alpha)
qqline(x.bonus ^ alpha)
df1 <- merge(data.frame(table(rgeom(10000, 0.1)) / 10000),
table(replicate(10000, myattempts(0.1))) / 10000,
by = "Var1")
knitr::opts_chunk$set(echo = TRUE)
set.seed(225)
#options(scipen = 999)
# myattempts(p)
mytoss = function(p){
u <- runif(1)
x <- as.numeric(u < p)
return(x)
}
myattempts = function(p){
counter <- 0
while (mytoss(p) == 0){counter <- counter + 1}
return(counter)
}
df1 <- merge(data.frame(table(rgeom(10000, 0.1)) / 10000),
table(replicate(10000, myattempts(0.1))) / 10000,
by = "Var1")
df1 <- merge(df1,
data.frame(0:100, round(dgeom(0:100, 0.1),5)),
by.x = "Var1",
by.y = "X0.100")
df1 <- df[order(df$Var1),]
df1 <- merge(data.frame(table(rgeom(10000, 0.1)) / 10000),
table(replicate(10000, myattempts(0.1))) / 10000,
by = "Var1")
df1 <- merge(df1,
data.frame(0:100, round(dgeom(0:100, 0.1),5)),
by.x = "Var1",
by.y = "X0.100")
#df1 <- df[order(df$Var1),]
#rownames(df1) <- NULL
#setNames(df1, c("failures", "rgeom", "myattempts", "dgeom"))
df1
df1 <- merge(data.frame(table(rgeom(10000, 0.1)) / 10000),
table(replicate(10000, myattempts(0.1))) / 10000,
by = "Var1")
df1 <- merge(df1,
data.frame(0:100, round(dgeom(0:100, 0.1),5)),
by.x = "Var1",
by.y = "X0.100")
df1 <- df[order(df$Var1),]
df1 <- merge(data.frame(table(rgeom(10000, 0.1)) / 10000),
table(replicate(10000, myattempts(0.1))) / 10000,
by = "Var1")
df1 <- merge(df1,
data.frame(0:100, round(dgeom(0:100, 0.1),5)),
by.x = "Var1",
by.y = "X0.100")
df1 <- df[order(Var1),]
df1 <- merge(data.frame(table(rgeom(10000, 0.1)) / 10000),
table(replicate(10000, myattempts(0.1))) / 10000,
by = "Var1")
df1 <- merge(df1,
data.frame(0:100, round(dgeom(0:100, 0.1),5)),
by.x = "Var1",
by.y = "X0.100")
df1 <- df1[order(df1$Var1),]
rownames(df1) <- NULL
setNames(df1, c("failures", "rgeom", "myattempts", "dgeom"))
head(df1)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1009)
one.dice <- function(){
dice <- sample(1:6, size = 1, replace = TRUE)
return(dice)
}
one.dice()
one.dice <- function(){
dice <- sample(1:6, size = 1, replace = TRUE)
return(dice)
}
one.dice()
par(mfrow=c(2,2))
for (i in 1:4){
sims <- replicate(100, one.dice())
table(sims)
table(sims)/length(sims)
plot(table(sims), xlab = 'Event', ylab = 'Frequency')
}
par(mfrow=c(2,2))
for (i in 1:4){
sims <- replicate(10000, one.dice())
table(sims)
table(sims)/length(sims)
plot(table(sims), xlab = 'Event', ylab = 'Frequency')
}
dmultinom(x = c(1,2,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(1,1,1), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(1,0,2), prob = c(3/5,1/5,1/5))
combn(1,3) * 3/5 * (1 - 3/5)^2
combn(3,1) * 3/5 * (1 - 3/5)^2
combn(3,1)
combn(3,2)
combn(3,3)
combn(3,2)
combn(3,1)
choose(3,1) * 3/5 * (1 - 3/5)^2
dmultinom(x = c(1,2,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(1,1,1), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(1,0,2), prob = c(3/5,1/5,1/5))
# theoretical probability
choose(3,1) * 3/5 * (1 - 3/5)^2
dmultinom(x = c(1,2,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(0,2,1), prob = c(3/5,1/5,1/5))
# theoretical probability
choose(3,2) * (1/5)^2 * (1 - 1/5)
dmultinom(x = c(1,2,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(2,1,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(3,0,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(0,3,0), prob = c(3/5,1/5,1/5))
# theoretical probability
1 - (1/5)^3
dmultinom(x = c(1,2,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(2,1,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(3,0,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(0,3,0), prob = c(3/5,1/5,1/5))
# theoretical probability
1 - (1/5)^3
dmultinom(x = c(1,2,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(2,1,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(3,0,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(0,3,0), prob = c(3/5,1/5,1/5))
# theoretical probability
1 - (1/5)^2
dmultinom(x = c(1,2,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(2,1,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(3,0,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(0,3,0), prob = c(3/5,1/5,1/5))
# theoretical probability
1 - (1/5)^3
dmultinom(x = c(1,2,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(2,1,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(3,0,0), prob = c(3/5,1/5,1/5)) +
dmultinom(x = c(0,3,0), prob = c(3/5,1/5,1/5))
# theoretical probability
1 - (choose(3,1)*1/5*(4/5)^2 + choose(3,2)*(1/5)^2*4/5 + (1/5)^3)
dmultinom(x = c(1,2,0), prob = c(3/5,1/5,1/5))
# theoretical probability
choose(3,1) * 3/5 * (1/5)^2
rmultinom(n = 100, size = 3, prob=c(3/5,1/5,1/5))
df <- t(data.frame(rmultinom(n = 100, size = 3, prob=c(3/5,1/5,1/5))))
df
df <- t(data.frame(rmultinom(n = 100, size = 3, prob=c(3/5,1/5,1/5))))
head(df)
df$1
df$col1
df[(df[,1]=1) & (df[,2]=2) & (df[,3]=0)]
df[,(df[,1]=1) & (df[,2]=2) & (df[,3]=0)]
df[,(df[,1]==1) & (df[,2]==2) & (df[,3]==0)]
df <- t(data.frame(rmultinom(n = 1000, size = 3, prob=c(3/5,1/5,1/5))))
names(df) <- c("beer", "bread", "coke")
head(df)
df <- t(data.frame(rmultinom(n = 1000, size = 3, prob=c(3/5,1/5,1/5))))
colnames(df) <- c("beer", "bread", "coke")
head(df)
df[,(df$beer==1) & (df$bread==2) & (df$coke==0)]
df[(1,2,0)]
df[,(1,2,0)]
df[(df$beer==1) & (df$bread==2) & (df$coke==0),]
df[(df["beer"]==1) & (df["bread"]==2) & (df["coke"]==0),]
df[(df["beer"]==1),]
df["beer"]
df$beer
df <- as.dataframe(t(data.frame(rmultinom(n = 1000, size = 3, prob=c(3/5,1/5,1/5)))))
df <- as.data.frame(t(data.frame(rmultinom(n = 1000, size = 3, prob=c(3/5,1/5,1/5)))))
colnames(df) <- c("beer", "bread", "coke")
head(df)
df[(df$beer==1)&(df$coke==2)&(df$coke==0),]
df[(df$beer==1),]
df[(df$beer==1),&(df$bread==2)&(df$coke==0),]
df[(df$beer==1)&(df$bread==2)&(df$coke==0),]
df <- t(data.frame(rmultinom(n = 1000, size = 3, prob=c(3/5,1/5,1/5))))
colnames(df) <- c("beer", "bread", "coke")
head(df)
df[df=c(1,2,0)]
df[df==c(1,2,0)]
df <- as.data.frame(df)
nrow(df[(df$beer==1)&(df$bread==2)&(df$coke==0),]) / nrow(df)
df <- as.data.frame(df)
nrow(df[(df$beer==1)&(df$bread==2)&(df$coke==0),]) / nrow(df)
df <- as.data.frame(df)
nrow(df[(df$beer==1)&(df$bread==2)&(df$coke==0),]) / nrow(df)
df <- t(data.frame(rmultinom(n = 10000, size = 3, prob=c(3/5,1/5,1/5))))
colnames(df) <- c("beer", "bread", "coke")
head(df)
df <- as.data.frame(df)
nrow(df[(df$beer==1)&(df$bread==2)&(df$coke==0),]) / nrow(df)
hist(df$beer, prob = T)
hist(df$beer)
hist(df$beer, prob = T)
hist(df$beer, prob = T, xlim = c(0,3))
hist(df$beer, prob = T, breaks = 3)
hist(df$beer, prob = T)
hist(df$beer, prob = T, breaks = 4)
hist(df$beer, prob = T, breaks = 5)
hist(df$beer, prob = T)
hist(df$beer, prob = T)
axis(side = 1, at = seq(0,3))
hist(df$beer, prob = T)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages("lubridate")
# install.packages('factoextra')
library(factoextra)
library(ggplot2)
library(stats)
library(stylo)
library(qgraph)
setwd('/Users/kristallqiu/Desktop/501/portfolio')
df <- read.csv('spotify_hitsong_full_1009.csv')[16000:17000,]
df <- df[!(rowSums(is.na(df))),]
head(df)
audio_features <- df[, c('danceability',
'energy',
'key',
'loudness',
'speechiness',
'acousticness',
'instrumentalness',
'liveness',
'valence',
'tempo')]
audio_features <- scale(audio_features)
head(audio_features)
m <- as.matrix(audio_features)
cos_sim <- m / sqrt(rowSums(m * m))
cos_sim <- cos_sim %*% t(cos_sim)
cos_dist <- as.dist(1 - cos_sim)
## Hierarchical clustering with Cosine Similarity
hc_cos <- hclust(d = cos_dist, method = 'ward.D2')
fviz_dend(hc_cos,
cex = 0.6)
fviz_dend(hc_cos, k = 2,
cex = 0.5,
k_colors = c('#2E9FDF','#FC4E07'),#'00AFBB',
color_labels_by_k = TRUE,
rect = TRUE)
fviz_dend(hc_cos, k = 3,
cex = 0.5,
k_colors = c('#2E9FDF','#FC4E07','#E7B800'),
color_labels_by_k = TRUE,
rect = TRUE)
fviz_dend(hc_cos, k = 4,
cex = 0.5,
k_colors = c('#2E9FDF','#00AFBB','#E7B800','#FC4E07'),
color_labels_by_k = TRUE,
rect = TRUE)
fviz_dend(hc_cos, k = 5,
cex = 0.5,
k_colors = c('#2E9FDF','#00AFBB','#E7B800','#FC4E07'),
color_labels_by_k = TRUE,
rect = TRUE)
# Hierarchical clustering
## Distance matrices
euc <- dist(audio_features, method = 'euclidean')
man <- dist(audio_features, method = 'manhattan')
## Hierarchical clustering with Euclidean distance
hc_euc <- hclust(d = euc, method = 'ward.D2')
fviz_dend(hc_cos, k = 5,
cex = 0.5,
k_colors = c('#2E9FDF','#00AFBB','#E7B800','#FC4E07','#8877bb'),
color_labels_by_k = TRUE,
rect = TRUE)
fviz_dend(hc_euc, k = 5,
cex = 0.5,
k_colors = c('#2E9FDF','#00AFBB','#E7B800','#FC4E07','#8877bb'),
color_labels_by_k = TRUE,
rect = TRUE)
fviz_dend(hc_man, k = 5,
cex = 0.5,
k_colors = c('#2E9FDF','#00AFBB','#E7B800','#FC4E07','#8877bb'),
color_labels_by_k = TRUE,
rect = TRUE)
## Hierarchical clustering with Manhattan distance
hc_man <- hclust(d = man, method = 'ward.D2')
fviz_dend(hc_man, k = 5,
cex = 0.5,
k_colors = c('#2E9FDF','#00AFBB','#E7B800','#FC4E07','#8877bb'),
color_labels_by_k = TRUE,
rect = TRUE)
